[{"/home/asvin/workspace/react/userdatalogin/src/index.js":"1","/home/asvin/workspace/react/userdatalogin/src/components/App.js":"2","/home/asvin/workspace/react/userdatalogin/src/reducers/index.js":"3","/home/asvin/workspace/react/userdatalogin/src/components/PostList.js":"4","/home/asvin/workspace/react/userdatalogin/src/components/Form.js":"5","/home/asvin/workspace/react/userdatalogin/src/actions/index.js":"6","/home/asvin/workspace/react/userdatalogin/src/service.js":"7","/home/asvin/workspace/react/userdatalogin/src/jsonserver.js":"8","/home/asvin/workspace/react/userdatalogin/src/components/Header.js":"9"},{"size":497,"mtime":1667793789000,"results":"10","hashOfConfig":"11"},{"size":423,"mtime":1668071887916,"results":"12","hashOfConfig":"11"},{"size":2065,"mtime":1668070449061,"results":"13","hashOfConfig":"11"},{"size":5571,"mtime":1669695964527,"results":"14","hashOfConfig":"11"},{"size":2638,"mtime":1667975402262,"results":"15","hashOfConfig":"11"},{"size":3158,"mtime":1668069693291,"results":"16","hashOfConfig":"11"},{"size":396,"mtime":1667811150000,"results":"17","hashOfConfig":"11"},{"size":152,"mtime":1667973878496,"results":"18","hashOfConfig":"11"},{"size":2172,"mtime":1668140222271,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"16nrybv",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"23"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"23"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"23"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/asvin/workspace/react/userdatalogin/src/index.js",[],[],[],"/home/asvin/workspace/react/userdatalogin/src/components/App.js",["54","55","56","57","58"],[],"import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\r\nimport { gapi } from 'gapi-script';\r\n\r\nimport PostList from './PostList';\r\nimport Header from './Header';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <PostList />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect((state) => state)(App);\r\n","/home/asvin/workspace/react/userdatalogin/src/reducers/index.js",["59","60"],[],"import { combineReducers } from 'redux';\r\nconst initialState = {\r\n  data: [],\r\n  loadingData: false,\r\n  showForm: false,\r\n  addPostLoading: false,\r\n  onEditLoading: false,\r\n  onDeleteLoading: false,\r\n  selectedPostId: null,\r\n  selectedPostDetails: null,\r\n  successMessage: null,\r\n};\r\n\r\nconst userData = {\r\n  isSignedIn: false,\r\n  googleId: null,\r\n  mail: null,\r\n};\r\nconst authReducer = (state = userData, action) => {\r\n  switch (action.type) {\r\n    case 'SET_SIGN_IN':\r\n      return {\r\n        ...state,\r\n        isSignedIn: action.payload,\r\n      };\r\n    case 'SET_GOOGLE_ID':\r\n      return {\r\n        ...state,\r\n        googleId: action.payload,\r\n      };\r\n    case 'SET_MAIL':\r\n      return {\r\n        ...state,\r\n        mail: action.payload,\r\n      };\r\n  }\r\n  return state;\r\n};\r\nconst postsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'SET_SUCCESS_MESSAGE':\r\n      return {\r\n        ...state,\r\n        successMessage: action.payload,\r\n      };\r\n    case 'SET_SELECTED_POST_DETAILS':\r\n      return {\r\n        ...state,\r\n        selectedPostDetails: action.payload,\r\n      };\r\n    case 'SET_LOADING_EDIT_POST':\r\n      return {\r\n        ...state,\r\n        onEditLoading: action.payload,\r\n      };\r\n    case 'SET_LOADING_DELETE_POST':\r\n      return {\r\n        ...state,\r\n        onDeleteLoading: action.payload,\r\n      };\r\n    case 'SET_EDIT_POST_ID':\r\n      return {\r\n        ...state,\r\n        selectedPostId: action.payload,\r\n      };\r\n    case 'SET_LOADING_DATA':\r\n      return {\r\n        ...state,\r\n        loadingData: action.payload,\r\n      };\r\n    case 'SET_LOADING_ADD_POST':\r\n      return {\r\n        ...state,\r\n        addPostLoading: action.payload,\r\n      };\r\n    case 'SET_POSTS':\r\n      return {\r\n        ...state,\r\n        data: [...action.payload],\r\n      };\r\n    case 'SET_FORM':\r\n      return {\r\n        ...state,\r\n        showForm: action.payload,\r\n      };\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default combineReducers({\r\n  dummyReducer: () => '',\r\n  posts: postsReducer,\r\n  authentication: authReducer,\r\n});\r\n","/home/asvin/workspace/react/userdatalogin/src/components/PostList.js",["61","62","63","64","65"],[],"import React, { useEffect, useState } from 'react';\r\nimport _ from 'lodash';\r\nimport DataTable from 'react-data-table-component';\r\nimport ReactModal from 'react-modal';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  setPosts,\r\n  showForm,\r\n  addPost,\r\n  getPost,\r\n  cancelForm,\r\n  editPost,\r\n  deletePost,\r\n  resetSuccessMessage,\r\n} from '../actions';\r\nimport moment from 'moment/moment';\r\nimport Form from './Form';\r\n\r\nconst PostList = ({\r\n  posts,\r\n  setPosts,\r\n  showForm,\r\n  addPost,\r\n  getPost,\r\n  cancelForm,\r\n  editPost,\r\n  deletePost,\r\n  resetSuccessMessage,\r\n  authentication,\r\n}) => {\r\n  const [delModalConfig, setDelModalConfig] = useState({\r\n    showModal: false,\r\n    deleteId: null,\r\n  });\r\n  console.log('authentication:', authentication.isSignedIn);\r\n  useEffect(() => {\r\n    if (!posts.onDeleteLoading) {\r\n      setDelModalConfig({\r\n        showModal: false,\r\n        deleteId: null,\r\n      });\r\n    }\r\n  }, [posts.onDeleteLoading]);\r\n\r\n  useEffect(() => {\r\n    if (posts.successMessage) {\r\n      toast.success(posts.successMessage, toastConfig);\r\n      resetSuccessMessage();\r\n    }\r\n  }, [posts.successMessage]);\r\n\r\n  useEffect(() => {\r\n    setPosts();\r\n  }, []);\r\n\r\n  ReactModal.setAppElement('#root');\r\n\r\n  const toastConfig = {\r\n    position: 'top-center',\r\n    autoClose: 2000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n    theme: 'dark',\r\n  };\r\n\r\n  const [showModal, setShowModal] = useState(true);\r\n\r\n  const columns = [\r\n    {\r\n      name: 'ID',\r\n      selector: (row) => row.id,\r\n    },\r\n    {\r\n      name: 'Title',\r\n      selector: (row) => row.title,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'Description',\r\n      selector: (row) => row.body,\r\n    },\r\n    {\r\n      name: 'Created Date',\r\n      selector: (row) =>\r\n        moment(row.createdAt).format('MMMM Do YYYY, h:mm:ss a'),\r\n    },\r\n    {\r\n      name: 'Action',\r\n      selector: (row) => (\r\n        <div>\r\n          {authentication.isSignedIn ? (\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-warning\"\r\n              onClick={() => onEditRecord(row)}\r\n            >\r\n              Edit\r\n              {posts.onEditLoading && posts.selectedPostId === row.id ? (\r\n                <div\r\n                  class=\"spinner-grow spinner-grow-sm\"\r\n                  style={{ marginLeft: '5px' }}\r\n                ></div>\r\n              ) : null}\r\n            </button>\r\n          ) : null}\r\n          {authentication.isSignedIn ? (\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-danger\"\r\n              onClick={() => onDelModal(row)}\r\n              style={{ marginLeft: '10px' }}\r\n            >\r\n              Delete\r\n            </button>\r\n          ) : null}\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  const onDelModal = (row) => {\r\n    setDelModalConfig({\r\n      showModal: true,\r\n      deleteId: row.id,\r\n    });\r\n  };\r\n\r\n  const onCloseModal = (row) => {\r\n    setDelModalConfig({\r\n      showModal: false,\r\n      deleteId: null,\r\n    });\r\n  };\r\n  const onDeleteConfirm = () => {\r\n    deletePost(delModalConfig.deleteId);\r\n  };\r\n\r\n  const onEditRecord = (row) => {\r\n    console.log(row.id);\r\n    getPost(row.id);\r\n  };\r\n\r\n  const onFormSubmit = (data) => {\r\n    console.log(data);\r\n    if (posts.selectedPostId) {\r\n      editPost(posts.selectedPostId, {\r\n        title: data.title,\r\n        body: data.description,\r\n        updatedAt: new Date().getTime(),\r\n      });\r\n    } else {\r\n      addPost({\r\n        title: data.title,\r\n        body: data.description,\r\n        createdAt: new Date().getTime(),\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"header d-flex justify-content-between align -item-center m-2\">\r\n        <ToastContainer />\r\n        <h1>POSTS</h1>\r\n\r\n        <ReactModal\r\n          isOpen={delModalConfig.showModal}\r\n          contentLabel=\"Minimal Modal Example\"\r\n        >\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-danger\"\r\n            onClick={() => onCloseModal()}\r\n          >\r\n            Close Modal\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-warning\"\r\n            onClick={() => onDeleteConfirm()}\r\n          >\r\n            Confirm{''}\r\n            {posts.onDeleteLoading ? <i className=\"bi bi-ubuntu\">...</i> : null}\r\n          </button>\r\n        </ReactModal>\r\n\r\n        {posts.showForm ? null : (\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={() => showForm(true)}\r\n          >\r\n            Add Post\r\n          </button>\r\n        )}\r\n      </div>\r\n      {posts.showForm ? (\r\n        <Form\r\n          onFormSubmit={onFormSubmit}\r\n          selectedPostDetails={posts.selectedPostDetails}\r\n          onCancel={cancelForm}\r\n          onSumbitLoading={posts.addPostLoading}\r\n        />\r\n      ) : (\r\n        <DataTable\r\n          columns={columns}\r\n          data={posts.data}\r\n          pagination\r\n          progressPending={posts.loadingData}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { posts: state.posts, authentication: state.authentication };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  setPosts,\r\n  showForm,\r\n  addPost,\r\n  getPost,\r\n  cancelForm,\r\n  editPost,\r\n  deletePost,\r\n  resetSuccessMessage,\r\n})(PostList);\r\n","/home/asvin/workspace/react/userdatalogin/src/components/Form.js",["66"],[],"import React, { useEffect } from 'react';\r\nimport { useFormik } from 'formik';\r\n\r\nconst Form = ({\r\n  onFormSubmit,\r\n  selectedPostDetails,\r\n  onCancel,\r\n  onSumbitLoading,\r\n}) => {\r\n  console.log(selectedPostDetails);\r\n  const validate = (values) => {\r\n    const errors = {};\r\n    if (!values.title) {\r\n      errors.title = 'Title Required';\r\n    }\r\n\r\n    if (!values.description) {\r\n      errors.description = 'Description Required';\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  const {\r\n    setFieldValue,\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    touched,\r\n    values, // use this if you want controlled components\r\n    errors,\r\n  } = useFormik({\r\n    initialValues: {\r\n      title: '',\r\n      description: '',\r\n    },\r\n    validate,\r\n    onSubmit: (values) => {\r\n      console.log(values);\r\n      onFormSubmit(values);\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedPostDetails) {\r\n      setFieldValue('title', selectedPostDetails.title);\r\n      setFieldValue('description', selectedPostDetails.body);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ margin: '50px 50px 50px 50px' }}>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"title\"\r\n            name=\"title\"\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            value={values.title}\r\n          />\r\n        </div>\r\n        <p>\r\n          {' '}\r\n          {touched.title && errors.title ? <span>{errors.title}</span> : null}\r\n        </p>\r\n        <div className=\"form-group\">\r\n          <label>Description</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            placeholder=\"description\"\r\n            rows=\"3\"\r\n            name=\"description\"\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            value={values.description}\r\n          ></textarea>\r\n          <p>\r\n            {' '}\r\n            {touched.description && errors.description ? (\r\n              <span>{errors.description}</span>\r\n            ) : null}\r\n          </p>\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Submit\r\n          {onSumbitLoading ? (\r\n            <div\r\n              class=\"spinner-grow spinner-grow-sm\"\r\n              style={{ marginLeft: '5px' }}\r\n            ></div>\r\n          ) : null}\r\n        </button>\r\n        <button type=\"button\" className=\"btn btn-light\" onClick={onCancel}>\r\n          Cancel\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","/home/asvin/workspace/react/userdatalogin/src/actions/index.js",["67","68","69"],[],"import PostService from '../service';\r\n\r\nexport const setPosts = () => async (dispatch) => {\r\n  dispatch(loadingPosts(true));\r\n  await new Promise((res) => setTimeout(res, 1000));\r\n  const { data } = await PostService.listPosts();\r\n  dispatch({\r\n    type: 'SET_POSTS',\r\n    payload: data,\r\n  });\r\n\r\n  dispatch(loadingPosts(false));\r\n};\r\nexport const signIn = (signin) => {\r\n  return {\r\n    type: 'SET_SIGN_IN',\r\n    payload: signin,\r\n  };\r\n};\r\nexport const googleId = (gid) => {\r\n  return {\r\n    type: 'SET_GOOGLE_ID',\r\n    payload: gid,\r\n  };\r\n};\r\nexport const mail = (mail) => {\r\n  return {\r\n    type: 'SET_MAIL',\r\n    payload: mail,\r\n  };\r\n};\r\nexport const loadingPosts = (payload) => {\r\n  return {\r\n    type: 'SET_LOADING_DATA',\r\n    payload: payload,\r\n  };\r\n};\r\nexport const addPostLoading = (payload) => {\r\n  return {\r\n    type: 'SET_LOADING_ADD_POST',\r\n    payload: payload,\r\n  };\r\n};\r\nexport const showForm = (payload) => {\r\n  return {\r\n    type: 'SET_FORM',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const cancelForm = () => (dispatch) => {\r\n  dispatch(showForm(false));\r\n  dispatch({\r\n    type: 'SET_EDIT_POST_ID',\r\n    payload: null,\r\n  });\r\n  dispatch({\r\n    type: 'SET_SELECTED_POST_DETAILS',\r\n    payload: null,\r\n  });\r\n};\r\n\r\nexport const addPost = (payload) => async (dispatch) => {\r\n  dispatch(addPostLoading(true));\r\n  await new Promise((res) => setTimeout(res, 1000));\r\n  const { data } = await PostService.createPost(payload);\r\n\r\n  dispatch(addPostLoading(false));\r\n  dispatch(showForm(false));\r\n  dispatch(setSuccessMessage('ADD SUCCESSFULLY'));\r\n  dispatch(setPosts());\r\n};\r\n\r\nexport const editPost = (id, payload) => async (dispatch) => {\r\n  dispatch(addPostLoading(true));\r\n  await new Promise((res) => setTimeout(res, 1000));\r\n  const { data } = await PostService.updatePost(id, payload);\r\n\r\n  dispatch(addPostLoading(false));\r\n  dispatch(cancelForm());\r\n  dispatch(setSuccessMessage('SUCCESSFULLY EDITED'));\r\n  dispatch(setPosts());\r\n};\r\n\r\nexport const setSuccessMessage = (payload) => ({\r\n  type: 'SET_SUCCESS_MESSAGE',\r\n  payload,\r\n});\r\nexport const resetSuccessMessage = () => ({\r\n  type: 'SET_SUCCESS_MESSAGE',\r\n  payload: null,\r\n});\r\nexport const deletePost = (id) => async (dispatch) => {\r\n  dispatch({\r\n    type: 'SET_LOADING_DELETE_POST',\r\n    payload: true,\r\n  });\r\n  await new Promise((res) => setTimeout(res, 1000));\r\n  const { data } = await PostService.deletePost(id);\r\n  dispatch({\r\n    type: 'SET_LOADING_DELETE_POST',\r\n    payload: false,\r\n  });\r\n  dispatch(cancelForm());\r\n  dispatch(setSuccessMessage('DELETED SUCCESSFULLY'));\r\n  dispatch(setPosts());\r\n};\r\n\r\nexport const getPost = (id) => async (dispatch) => {\r\n  dispatch({\r\n    type: 'SET_LOADING_EDIT_POST',\r\n    payload: true,\r\n  });\r\n  dispatch({\r\n    type: 'SET_EDIT_POST_ID',\r\n    payload: id,\r\n  });\r\n  await new Promise((res) => setTimeout(res, 1000));\r\n  const { data } = await PostService.getPost(id);\r\n  dispatch({\r\n    type: 'SET_SELECTED_POST_DETAILS',\r\n    payload: data,\r\n  });\r\n  dispatch({\r\n    type: 'SET_LOADING_EDIT_POST',\r\n    payload: false,\r\n  });\r\n\r\n  // dispatch(addPostLoading(false));\r\n  dispatch(showForm(true));\r\n  dispatch(setPosts());\r\n};\r\n","/home/asvin/workspace/react/userdatalogin/src/service.js",["70"],[],"import jsonserver from './jsonserver';\r\n\r\nexport default {\r\n  //List\r\n  listPosts: () => jsonserver.get('posts'),\r\n  //Create\r\n  createPost: (data) => jsonserver.post('posts', data),\r\n  //update\r\n  updatePost: (id, data) => jsonserver.put(`posts/${id}`, data),\r\n  //delete\r\n  deletePost: (id) => jsonserver.delete(`posts/${id}`),\r\n  // get\r\n  getPost: (id) => jsonserver.get(`posts/${id}`),\r\n};\r\n","/home/asvin/workspace/react/userdatalogin/src/jsonserver.js",[],[],"/home/asvin/workspace/react/userdatalogin/src/components/Header.js",["71"],[],{"ruleId":"72","severity":1,"message":"73","line":1,"column":17,"nodeType":"74","messageId":"75","endLine":1,"endColumn":26},{"ruleId":"72","severity":1,"message":"76","line":1,"column":28,"nodeType":"74","messageId":"75","endLine":1,"endColumn":36},{"ruleId":"72","severity":1,"message":"77","line":4,"column":10,"nodeType":"74","messageId":"75","endLine":4,"endColumn":21},{"ruleId":"72","severity":1,"message":"78","line":4,"column":23,"nodeType":"74","messageId":"75","endLine":4,"endColumn":35},{"ruleId":"72","severity":1,"message":"79","line":5,"column":10,"nodeType":"74","messageId":"75","endLine":5,"endColumn":14},{"ruleId":"80","severity":1,"message":"81","line":20,"column":3,"nodeType":"82","messageId":"83","endLine":36,"endColumn":4},{"ruleId":"80","severity":1,"message":"81","line":40,"column":3,"nodeType":"82","messageId":"83","endLine":86,"endColumn":4},{"ruleId":"72","severity":1,"message":"84","line":2,"column":8,"nodeType":"74","messageId":"75","endLine":2,"endColumn":9},{"ruleId":"85","severity":1,"message":"86","line":52,"column":6,"nodeType":"87","endLine":52,"endColumn":28,"suggestions":"88"},{"ruleId":"85","severity":1,"message":"89","line":56,"column":6,"nodeType":"87","endLine":56,"endColumn":8,"suggestions":"90"},{"ruleId":"72","severity":1,"message":"91","line":71,"column":10,"nodeType":"74","messageId":"75","endLine":71,"endColumn":19},{"ruleId":"72","severity":1,"message":"92","line":71,"column":21,"nodeType":"74","messageId":"75","endLine":71,"endColumn":33},{"ruleId":"85","severity":1,"message":"93","line":48,"column":6,"nodeType":"87","endLine":48,"endColumn":8,"suggestions":"94"},{"ruleId":"72","severity":1,"message":"95","line":66,"column":11,"nodeType":"74","messageId":"75","endLine":66,"endColumn":15},{"ruleId":"72","severity":1,"message":"95","line":77,"column":11,"nodeType":"74","messageId":"75","endLine":77,"endColumn":15},{"ruleId":"72","severity":1,"message":"95","line":99,"column":11,"nodeType":"74","messageId":"75","endLine":99,"endColumn":15},{"ruleId":"96","severity":1,"message":"97","line":3,"column":1,"nodeType":"98","endLine":14,"endColumn":3},{"ruleId":"99","severity":1,"message":"100","line":48,"column":11,"nodeType":"101","endLine":52,"endColumn":13},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'GoogleLogin' is defined but never used.","'GoogleLogout' is defined but never used.","'gapi' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'_' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'resetSuccessMessage' and 'toastConfig'. Either include them or remove the dependency array. If 'resetSuccessMessage' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["102"],"React Hook useEffect has a missing dependency: 'setPosts'. Either include it or remove the dependency array. If 'setPosts' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["103"],"'showModal' is assigned a value but never used.","'setShowModal' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'selectedPostDetails' and 'setFieldValue'. Either include them or remove the dependency array.",["104"],"'data' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},"Update the dependencies array to be: [posts.successMessage, resetSuccessMessage, toastConfig]",{"range":"111","text":"112"},"Update the dependencies array to be: [setPosts]",{"range":"113","text":"114"},"Update the dependencies array to be: [selectedPostDetails, setFieldValue]",{"range":"115","text":"116"},[1219,1241],"[posts.successMessage, resetSuccessMessage, toastConfig]",[1290,1292],"[setPosts]",[1038,1040],"[selectedPostDetails, setFieldValue]"]